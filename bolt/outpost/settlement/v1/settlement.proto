syntax = "proto3";

package bolt.outpost.settlement.v1;

import "bolt/assets/v1/assets.proto";

// Service 1: PublicSettlementService
service PublicSettlementService {
  // Endpoint to fetch the pool info.
  rpc GetPool(GetPoolRequest) returns (GetPoolResponse);
  // Endpoint to fetch the pool by asset.
  rpc GetPoolByBaseAsset(GetPoolByBaseAssetRequest) returns (GetPoolByBaseAssetResponse);
  // Endpoint to query available pools.
  rpc GetPools(GetPoolsRequest) returns (GetPoolsResponse);
  // Endpoint to fetch balances of BASE asset and all QUOTE assets.
  rpc GetBalances(GetBalancesRequest) returns (GetBalancesResponse);
  // Endpoint to fetch the trade details.
  rpc GetTrade(GetTradeRequest) returns (GetTradeResponse);
  // Endpoint to subscribe to trades.
  rpc SubscribeTrades(SubscribeTradesRequest) returns (stream SubscribeTradesResponse);
  // Endpoint to subscribe to balance changes.
  rpc SubscribeBalanceUpdates(SubscribeBalanceUpdatesRequest) returns (stream SubscribeBalanceUpdatesResponse);
  // Endpoint to fetch the user contribution to the pool.
  rpc GetSupplyContribution(GetSupplyContributionRequest) returns (GetSupplyContributionResponse);
  // Endpoint to query the settlement info.
  rpc SettlementInfo(SettlementInfoRequest) returns (SettlementInfoResponse);
}

// GetPoolRequest: Request to fetch info about a specific pool.
message GetPoolRequest {
  // pool_identifier: The pool to fetch.
  string pool_identifier = 1;
}

// GetPoolResponse: Response to the GetPoolRequest.
message GetPoolResponse {
  // pool: Description of the pool.
  Pool pool = 1;
}

// GetPoolByBaseAssetRequest: Request to fetch a liquidity pool managing particular
// asset.
message GetPoolByBaseAssetRequest {
  // base_asset: BASE asset we want the fetched pool to manage.
  string base_asset = 1;
}

// GetPoolByBaseAssetResponse: Response to the GetPoolByBaseAssetRequest.
message GetPoolByBaseAssetResponse {
  // pool: Description of the pool.
  Pool pool = 1;
}

// GetPoolsRequest: Request to query pools managed by this service.
message GetPoolsRequest {}

// GetPoolsResponse: Response to the GetPoolsRequest.
message GetPoolsResponse {
  // pools: Description of pools managed by this service.
  repeated Pool pools = 1;
}

// GetBalancesRequest: Request fetching BASE balance on all the pools, and all the
// QUOTE balances on pools with particular BASE asset.
message GetBalancesRequest {
  // user: Unique user identifier.
  string user = 1;
  // base_asset: BASE asset for which balances are fetched.
  string base_asset = 2;
  // height: Blockchain height at which we want the balance info. If SettlementService
  // is not running on Blockchain, this is the atomic point in time identifier - e. g.
  // timestamp. It's optional - if missing, the most recent balance should be returned.
  optional uint64 height = 3;
}

// GetBalancesResponse: Response for GetBalancesRequest.
message GetBalancesResponse {
  // base: BASE asset balance.
  bolt.assets.v1.Balance base = 1;
  // quotes: QUOTE assets balances.
  repeated bolt.assets.v1.Balance quotes = 2;
  // height: Blockchain height this balance info is accurate for. If SettlementService
  // is not running on Blockchain, this is the atomic point in time identifier - e. g.
  // timestamp.
  uint64 height = 3;
}

// GetTradeRequest: Request fetching specific trade details..
message GetTradeRequest {
  // id: Trade unique identifier
  string id = 1;
}

// GetTradeResponse: Response for GetTradeRequest.
message GetTradeResponse {
  // trade: Fetched trade details.
  Trade trade = 1;
}

// SubscribeTradesRequest: Request starting trades subscription.
message SubscribeTradesRequest {}

// SubscribeTradesResponse: Streamed response for SubscribeTradesRequest.
message SubscribeTradesResponse {
  // trade: Details of trade that happened.
  Trade trade = 1;
}

// Trade: Single trade details.
message Trade {
  // id: Trade unique identifier
  string id = 1;
  // input: Balance added to the pool by the trade.
  bolt.assets.v1.Balance input = 2;
  // output: Balance drained from the pool by the trade.
  bolt.assets.v1.Balance output = 3;
  // source: The source of the trade. Source could be the Sui pool ID, or the EVM
  // address.
  string source = 4;
  // fee: Total fees of the trade.
  bolt.assets.v1.Balance fee = 5;
  // sender: Trade sender identifier, for example the sender address.
  string sender = 6;
  // height: Height at which the trade happened.
  uint64 height = 7;
  // transaction_id: Identifier of the transaction including the trade - hash, digest,
  // etc.
  string transaction_id = 8;
}

// Pool: Description of the single liquidity pool.
message Pool {
  // base_asset: Pool BASE asset.
  string base_asset = 1;
  // base_amount: Amount of BASE asset int he pool.
  string base_amount = 2;
  // qute_assets: Asset that can be used as QUOTE to acqire BASE asset from this pool.
  repeated string quote_assets = 3;
  // lp_fee_ratio: Transaction fee to be distributed among liquidity providers according
  // to their shares.
  string lp_fee_ratio = 4;
  // protocol_fee_ratio: Transaction fee to be collected for the protocol.
  string protocol_fee_ratio = 5;
  // min_base_out: Minimum BASE amount that can be transared out per to avoid too low
  // quantity transaction as it could make MMM too difficult/impossible. Basically
  // defensive mechanism about DoS attacks against MMs.
  string min_base_out = 6;
  // id: Pool unique identifier
  string id = 7;
}

// SubscribeBalanceUpdatesRequest: Request starting balance updates subscription.
message SubscribeBalanceUpdatesRequest {
  // assets: List of assets to subscribe. Empty subscribes to all updates on this settlement.
  repeated string assets = 1;
}

// SubscribeBalanceUpdatesResponse: Streamed response for SubscribeBalanceUpdatesRequest.
message SubscribeBalanceUpdatesResponse {
  // update: Pool update details.
  BalanceUpdate update = 1;
}

// BalanceUpdate: Single balance update event details.
message BalanceUpdate {
  // epoch: Epoch index which supply balance has changed. Optional as it would be missing
  // for pools with only a single epoch (e. g. CW).
  optional uint64 epoch = 1;
  // base_out: BASE asset balance drained from the supply to be used in a trade.
  bolt.assets.v1.Balance base_out = 2;
  // quote_in: QUOTE asset balance put in the pool with this trade.
  bolt.assets.v1.Balance quote_in = 3;
  // sender: The sender if the tx hat indicated the event.
  string sender = 4;
  // transaction_id: Unique id of transaction that triggered the update.
  string transaction_id = 5;
  // height: Blockchain height at which we want the balance info. If SettlementService
  // is not running on Blockchain, this is the atomic point in time identifier - e. g.
  // timestamp.
  uint64 height = 6;
  // total_shares: Total amount of LP shares minted in the supply of the updated pool.
  string total_shares = 7;
  // lp_fee: Total LP fees collected on this balance update, always in the BASE asset
  string lp_fee = 8;
  // bolt_fee: Bolt protocol fee collected on this balance update, always in the QUOTE asset
  string bolt_fee = 9;
  // pool_id: Pool id on which update happened
  string pool_id = 10;
}

// GetSupplyContributionRequest: Request fetching users supply contribution in the pool.
message GetSupplyContributionRequest {
  // base_asset: BASE asset of the pool.
  string base_asset = 1;
  // epoch: Intex of the epoch to get the contribution info for. It is optional, but it
  // should always be set if the pool supports more than a single epoch, and should
  // (e. g. Sui) always be empty for single epoch pools (e. g. CW).
  optional uint64 epoch = 2;
  // user: Unique user identifier to get contribution for.
  string user = 3;
  // height: Height on which the contribution is fetched. Optional, last state if height
  // is not provided.
  optional uint64 height = 4;
}

// GetSupplyContributionResponse: Response for GetSupplyContributionRequest.
message GetSupplyContributionResponse {
  // base: Total BASE asset balance in that specific supply.
  bolt.assets.v1.Balance base = 1;
  // total_supply: Total amount of LP shares minted in that specific supply.
  string total_supply = 2;
  // user_base: Specific user BASE asset balance in that specific supply.
  bolt.assets.v1.Balance user_base = 3;
  // user_shares: LP sharees in that specific supply owned by the user.
  string user_shares = 4;
  // height: Height on which the most recent shares were minted. Note that if
  // height was provied, it is the last shares minting before the queried height.
  optional uint64 height = 5;
}

// SettlementInfoRequest: Queries for settlement info.
message SettlementInfoRequest {}

// SettlementInfoResponse: Response for SettlementInfoRequest.
message SettlementInfoResponse {
  // network_id: Network identifier where the settlement sync is deployed.
  string network_id = 1;
}

// Service 2: PrivateSettlementService
service PrivateSettlementService {
  // Endpoint to swap assets. Should be invoked by the user to swap assets.
  rpc SwapExactIn(SwapExactInRequest) returns (SwapExactInResponse);
  // Endpoint to withdraw quotes. Should be invoked by the liquidity provider to withdraw quotes.
  rpc WithdrawQuotes(WithdrawQuotesRequest) returns (WithdrawQuotesResponse);
  // Endpoint to withdraw all quotes. Should be invoked by the liquidity provider to withdraw all quotes.
  rpc WithdrawAllQuotes(WithdrawAllQuotesRequest) returns (WithdrawAllQuotesResponse);
  // Endpoint to deposit base asset. Should be invoked by the liquidity provider to deposit the base asset.
  rpc DepositBase(DepositBaseRequest) returns (DepositBaseResponse);
  // Endpoint to withdraw base asset. Should be invoked by the liquidity provider to withdraw base asset.
  rpc WithdrawBase(WithdrawBaseRequest) returns (WithdrawBaseResponse);
  // Endpoint to withdraw all base asset. Should be invoked by the liquidity provider to withdraw all base asset.
  rpc WithdrawAllBases(WithdrawAllBasesRequest) returns (WithdrawAllBasesResponse);
  // Endpoint to get the information about the network the oracle is running on
  rpc Info(InfoRequest) returns (InfoResponse);
}

// SwapExactInRequest: Request to swap assets. Should be invoked by the user to swap assets.
message SwapExactInRequest {
  // want_out: The asset the user wants to receive. e.g. USDT
  string want_out = 1;
  // input: The amount of asset the user wants to sell. e.g. ATOM
  Asset input = 2;
  // min_base_out: The minimum amount of base asset the user wants to receive, after fees. in rational values e.g 5/3
  string min_base_out = 3;
  // receiver: The address of the user who will receive the swapped asset. e.g. archway1qwertyuiopasdfghjklzxcvbnm
  string receiver = 4;
}

// SwapExactInResponse: Response to the SwapExactInRequest. Contains information about the swap.
message SwapExactInResponse {
  // base_out: The amount of base asset the user received.
  Asset base_out = 1;
  // spot_price: The spot price of the swap as shared by the oracle at the time of the swap.
  string spot_price = 2;
  // fee: The fee charged for the swap. includes protocol fees and lp fees
  Asset fee = 3;
  // trade_id: The id of the trade. e.g. tx hash
  string trade_id = 4;
}

// WithdrawQuotesRequest: Request to withdraw quotes. Should be invoked by the liquidity provider to withdraw quotes.
message WithdrawQuotesRequest {
  // base_asset: The base asset against which the accumulated quotes that the user wants to withdraw. e.g. USDT pool
  string base_asset = 1;
  // receiver: The address where withdrawn quotes should be deposited. If not provided, the default sender address
  // would be used.
  optional string receiver = 2;
  // quotes: Quotes to withdraw - if empty, all quotes for this base would be withdrawn.
  repeated string quotes = 3;
}

// WithdrawQuotesResponse: Response to the WithdrawQuotesRequest.
message WithdrawQuotesResponse {
  // withdrawn: The amount of assets withdrawn. e.g. BTC, ETH
  repeated Asset withdrawn = 1;
}

// WithdrawAllQuotesRequest: Request to withdraw all quotes. Should be invoked by the liquidity provider to withdraw all quotes.
message WithdrawAllQuotesRequest {
  // receiver: Address where withdrawn quotes should be deposited. If not provided, the default sender address would be used.
  optional string receiver = 1;
}

// WithdrawAllQuotesResponse: Response to the WithdrawAllQuotesRequest.
message WithdrawAllQuotesResponse {
  // withdrawn: The amount of quotes assets withdrawn. e.g. BTC, ETH
  repeated Asset withdrawn = 1;
}

// DepositBaseRequest: Request to deposit base asset. Should be invoked by the liquidity provider to deposit the base asset.
message DepositBaseRequest {
  // amount: The amount of base asset the user wants to deposit. e.g. 1000 USDT
  Asset amount = 1;
}

// DepositBaseResponse: Response to the DepositBaseRequest. Contains information about the deposit.
message DepositBaseResponse {
  // amount: The amount of base asset the user deposited. e.g. 1000 USDT
  Asset amount = 1;
  // tx_id: The hash of the transaction.
  string tx_id = 2;
  // epoch: Epoch to which balance was added, and in which new shares were minted. It would be missing if the pool is not
  // supporting epochs (e. g. CW).
  optional uint64 epoch = 3;
  // shares: The amount of LP the user owns in the epoch the balance was added to. e.g. 1000 shares
  string shares = 4;
  // height: Blockchain height on which the shares were minted.
  uint64 height = 5;
}

// WithdrawBaseRequest: Request to withdraw base asset. Should be invoked by the liquidity provider to withdraw base asset.
message WithdrawBaseRequest {
  // base_asset: The base asset the user wants to withdraw. e.g. USDT
  string base_asset = 1;
}

// WithdrawBaseResponse: Response to the WithdrawBaseRequest. Contains information about the withdrawn base asset.
message WithdrawBaseResponse {
  // withdrawn: The amount of base asset withdrawn. e.g. 1000 USDT
  Asset withdrawn = 1;
  // tx_id: The hash of the transaction.
  string tx_id = 2;
}

// WithdrawAllBasesRequest: Request to withdraw all base asset. Should be invoked by the liquidity provider to withdraw all base asset.
message WithdrawAllBasesRequest {}

// WithdrawAllBasesResponse: Response to the WithdrawAllBasesRequest. Contains information about the withdrawn base asset.
message WithdrawAllBasesResponse {
  // withdrawn: The amount of base assets withdrawn. e.g. 1000 USDT
  repeated Asset withdrawn = 1;
  // tx_id: The hash of the transaction.
  string tx_id = 2;
}

// InfoRequest: Request to get information about the settlement.
message InfoRequest {}

// InfoResponse: Response to the InfoRequest. Contains information about which chain the settlement service is running on and the address of the signer.
message InfoResponse {
  // network_id: The chain id of the chain the settlement service is running on. e.g. archway-1
  string network_id = 1;
  // whoami: The address of the signer who will be submitting the transactions. e.g. archway1qwertyuiopasdfghjklzxcvbnm
  string whoami = 2;
  // epochs: Idicates if the settlement supports multiple epochs
  bool epochs = 3;
}

// Asset: The asset being traded. e.g. BTC, ETH
message Asset {
  // denom: The denomination of the asset. e.g. ARCH, USDT
  string denom = 1;
  // amount: The amount of the asset in rational values e.g. 5/3
  string amount = 2;
}
