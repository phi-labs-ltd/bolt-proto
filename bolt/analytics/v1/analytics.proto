syntax = "proto3";

package bolt.analytics.v1;

import "bolt/assets/v1/assets.proto";

// Service collecting derived metrics for analytics
service AnalyticsService {
  rpc GetPoolAnalytics(GetPoolAnalyticsRequest) returns (GetPoolAnalyticsResponse);
}

// Query to fetch collected metrics
message GetPoolAnalyticsRequest {
  // Pairs to get metrics for. Note that, this pairs are not symmetrical - ARCH/BTC would
  // only return metrics for ARCH/BTC trades, not BTC/ARCH trades. To get both pairs,
  // they should be both added to the assets queried.
  // If no pairs are provided, all pairs metrics would be returned.
  repeated bolt.assets.v1.Pair pairs = 1;
  // Pool ids to get metrics for. If not set, all pools analytics would be returned.
  repeated string pool_ids = 2;
}

// Response to GetTradingVolumeRequest
message GetPoolAnalyticsResponse {
  // Metrics collected per pair
  repeated PoolAnalytics tvl = 1;
}

// Trading volume metrics
message PoolAnalytics {
  // Pool id this metrics adhere to
  string pool_contract_id = 1;
  // Analytics for each pair in the pool
  repeated TradingPairAnalytics trading_pair_analytics = 2;
}

message TradingPairAnalytics {
  // Pair this metrics adhere to
  bolt.assets.v1.Pair pair = 1;
  // Total volume of the BASE asset traded in this pair. Repeated, as it might
  // contain the volume in different denoms (typically the base denom itself and
  // the unified denom like USDC).
  bolt.assets.v1.Balance total_base_out = 3;
  // Total volume of the BASE asset traded in this pair. Repeated, as it might
  // contain the volume in different denoms (typically the base denom itself and
  // the unified denom like USDC).
  bolt.assets.v1.Balance total_quote_in = 4;
  // Total Bolt fees generated in this pair swaps.
  bolt.assets.v1.Balance total_bolt_fees = 5;
  // Total LP fees generated in this pair swaps.
  bolt.assets.v1.Balance total_lp_fees = 6;
}